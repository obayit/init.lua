{
   "company_id":{
      "scope":"python",
      "prefix":"company_id",
      "body":[
         "company_id = fields.Many2one('res.company', default=lambda self: self.env.user.company_id)"
      ],
      "description":"Change user in unit tests"
   },
   "print_var":{
      "scope":"python",
      "prefix":"print_var",
      "body":[
         "print('### ${1} is {}'.format(${1}))"
      ],
      "description":"print var value"
   },
   "unit_test_env_user":{
      "scope":"python",
      "prefix":"change.user",
      "body":[
         "    def setUpClass(cls):",
         "        super(TestSenderUser, cls).setUpClass()",
         "        cls.env = cls.env(user=cls.${0})",
         "        cls.cr = cls.env.cr"
      ],
      "description":"Change user in unit tests"
   },
   "print_override_functoin":{
      "scope":"python",
      "prefix":"super",
      "body":[
         "def $1(self):",
         "    res = super($2, self).$1()",
         "    $0",
         "    return res"
      ],
      "description":"override function"
   },
   "print_hashes":{
      "scope":"python",
      "prefix":"###",
      "body":[
         "print('### $0')"
      ],
      "description":"hashes print"
   },
   "print_simple":{
      "scope":"python",
      "prefix":"we are in the beam",
      "body":[
         "print('############################ we are in the beam #####################')"
      ],
      "description":"we are in the beam"
   },
   "print_custom":{
      "scope":"python",
      "prefix":"hashes",
      "body":[
         "print('############################ $1 #####################')"
      ],
      "description":"hashes"
   },
   "odoo_model":{
      "scope":"python",
      "prefix":"om",
      "body":[
         "from odoo import api, fields, models, _",
         "",
         "",
         "class $1(models.Model):",
         "    _name = \"${1/[_]/./g}\"",
         "    _description = \"${1/([^_]*)(_?)/${1:/capitalize}${2:+ }/g}\"",
         "    _order = \"sequence, id desc\"",
         "",
         "    sequence = fields.Integer('Sequence')",
         "    name = fields.Char(required=True)",
         ""
      ],
      "description":"model orderd with sequence"
   },
   "odoo_settings":{
      "scope":"python",
      "prefix":"settings",
      "body":[
         "from odoo import api, fields, models, _",
         "",
         "",
         "class ResCompany(models.Model):",
         "    _inherit = \"res.company\"",
         "",
         "    $1 = fields.$2($0)",
         "",
         "",
         "class ResConfigSettings(models.TransientModel):",
         "    _inherit = 'res.config.settings'",
         "",
         "    $1 = fields.$2(related='company_id.$1', readonly=False)"
      ],
      "description":"model settings and company combo"
   },
   "odoo_action_smart_button":{
      "scope":"python",
      "prefix":"action",
      "body":[
         "def action_$1(self):",
         "    self.ensure_one()",
         "    action = self.env['ir.actions.act_window'].for_xml_id('$2', '$3')",
         "    action['domain'] = [('$4_id', '=', self.id)]",
         "    action['context'] = dict(self.env.context)",
         "    action['context']['default_$4_id'] = self.id",
         "    return action"
      ],
      "description":"action for smart button o2m"
   },
   "odoo_field":{
      "scope":"python",
      "prefix":"field",
      "body":[
         "$1 = fields.$2"
      ],
      "description":"field"
   },
   "python_base64":{
      "scope":"python",
      "prefix":"base64",
      "body":[
         "import base64",
         "base64.b64encode(bytes('your string', 'utf-8'))"
      ],
      "description":"string to base64 encoding"
   },
   "odoo_employee_id":{
      "scope":"python",
      "prefix":"employee",
      "body":[
         "$0employee_id = fields.Many2one('hr.employee')"
      ],
      "description":"employee_id field"
   },
   "odoo_computed_field":{
      "scope":"python",
      "prefix":"compute",
      "body":[
         "$1 = fields.$2($0compute='_compute_$1')",
         "",
         "def _compute_$1(self):",
         "    for r in self:",
         "        r.$1 = $3"
      ],
      "description":"computed field"
   }
}
